# frozen_string_literal: true

require 'optimist'
require_relative 'lib/file_store/json'
require_relative 'lib/store_manager'
require_relative 'lib/arg_parser/factory'

class Main
  def initialize
    @opts = Optimist.options do
      banner 'Simple file based storage'
      opt :add, 'Add to storage Eg: key1:value1,key2:value2', type: :string
      opt :destroy, 'Destroy by key value pair, Eg: key1:value1', type: :string
      opt :find, 'Find records that have specific value, Eg: value1', type: :string
      opt :select, 'Sub command for find. filter keys for output generated by find, Eg: key1,key2,key3', type: :string
      opt :storage_location, 'Storage file location', type: :string, default: FileStore::JSON::DEFAULT_LOACTION
      conflicts :add, :destroy, :find
      conflicts :add, :destroy, :select
      educate_on_error
    end
  end

  def run
    parsed_opts.each_pair do |method, args|
      store_manager.public_send(method, args)
      StoreManager::SUB_COMMANDS_MAP[method]&.each do
        store_manager.public_send(method, args)
      end
    end
    puts store_manager
  end

  private

  attr_reader :opts

  def storage
    FileStore::JSON.new(opts[:storage_location])
  end

  def store_manager
    StoreManager.new(storage)
  end

  def parsed_opts
    ARGParser::Factory.new(opts).parse
  rescue ARGParser::Factory::ParsingError => e
    Optimist.die "Invalid argument #{e}"
  end
end

Main.new.run if __FILE__ == $PROGRAM_NAME
